The other morning, I had one of these lightbulb moments:&nbsp;**a crystal-clear idea for a short video**.

I suddenly had that detailed vision of a short-form edit showcasing the powerful&nbsp;[**arbitrary properties in Tailwind CSS**](https://tailwindcss.com/docs/adding-custom-styles#arbitrary-properties).

I created a new Notion page, and wrote the whole script pretty much in one free-flowing attempt:

---

{% image
   image="video-script.png"
   width=0
   height=0
   altText="Screenhost of video script written in Notion"
   classes=""
   caption="The video script, written in one free flowing take." /%}

The video script, written in one free flowing take.

I could already feel this was going to be a really good piece of content.

---

A couple of hours later, I had recorded and edited a video for both YouTube (traditional 16/9 landscape) and Twitter/TikTok/YouTube&nbsp;**#shorts**&nbsp;in vertical format!

Before diving into the details of the journey, here‚Äôs that vertical video that I shared on Twitter:

---

---

Pretty cool, eh?

And I was able to use the exact same footage for a traditional, landscape mode video:

---

---

That's rad!

I'd like to take you through my learnings in this journey. Let‚Äôs dive in.

## **The recording process**

For this one, I decided I was going to record the camera/audio work separately, and do some screen recordings later.

Why?

Good question. I am not 100% sure lol. I think one of the key reasons was that my kids are currently on school holiday. It‚Äôs a hot summer. People mow lawns. Cicadas sing obnoxiously loudly.

In other words,&nbsp;**a lot can go wrong**&nbsp;with audio/camera recordings in this house at the moment.

You also may have read&nbsp;[**my recent content creator life crisis thread on Twtitter**](https://twitter.com/simonswiss/status/1609741532214747136?s=20)&nbsp;about going back to making things simple and enjoyable for myself.

Recording audio and screen in separate sessions has its own set of challenges (that could be the topic of another post!).

But honestly, for me personally, the logistics of doing it separately are exponentially much simpler and less taxing.

Ok, so looks like I actually know exactly why I did it this way ü§£

## **Recording the on-camera + audio**

I set up all my lights, closed the window and door. Checked my hair, opted for a hat instead (üòÖ). And I hit record.

I recored the whole script, presenting to the camera.

Some of the parts that I knew would be audio-only, I was just reading from the screen instead of doing eye contact with the audience. But I still recorded everything in one take.

It‚Äôs the best way to have a consistent sound throughout the whole video. And consistent energy, tone of voice etc.

**Side note**: I took particular care in this session to not use a ‚Äúon-air‚Äù voice. I tend to speak differently when I do a presentation to when I speak normally.

For this one (and going forward), I wanted to sounds just like I was talking to a friend. The normal simonswiss. I think it‚Äôs the best kind of simonswiss.

I did have numerous positive comments on my&nbsp;_particularly good energy_&nbsp;on this video, so‚Ä¶ my theory must have some legs to it.

## **Recording the screen**

Aaaahh. Finally.

I know. If you‚Äôre here from the title of this post, this is what you‚Äôve been looking for. I just needed to set up the stage for‚Ä¶ no particular reason üòÖ

Okay, let‚Äôs dive in.

I did my routine thing:

- Set the&nbsp;**screen resolution**&nbsp;to&nbsp;`1280x720`&nbsp;HDPI (shoutout to&nbsp;[**How to egghead**](https://howtoegghead.com/))
- Setup vscode with a ‚Äúpreview‚Äù UI on the side. I did my&nbsp;**typical 2/3 code, 1/3 UI (roughly) split**.
- Get in&nbsp;**Zen mode + full screen**&nbsp;for a clutter-free UI
- Fire up OBS, make sure the correct screen source is set.
- Hit record üî¥

### **The aha moment**

Right there and then, before I even typed one character in my recording, I heard an inner voice.

It YELLED at me.

**STOOOOOOPPP!!!**

It reminded me that I always wish I did a certain screencast in vertical format instead of the traditional 16/9 ratio.

> _**Just like web design went through a ‚Äúresponsive design‚Äù transformation many years ago‚Ä¶ making videos now requires the same responsive design thinking.**_

I know this, and I have known this for years.

In 2019, I was telling everyone to start doing TikToks and get used to creating content in vertical format:

---

---

---

Yet, almost 4 years later, I still really haven‚Äôt really gotten into the habit myself.

**Boo, Simon.**&nbsp;Big boooo.

Anyway... not this time!

---

### **Write&nbsp;Record once,&nbsp;use&nbsp;edit everywhere ‚Ñ¢**

You know that developer‚Äôs dream of writing code that works on iOS, Android and web? I mean, it‚Äôs not just a dream - there are tools getting you very close to this.

I have the same dream with making videos.

I want to&nbsp;**record once**, and use the same footage for creating YouTube traditional videos, but also YouTube #shorts, TikToks, Insta Reels, and even‚Ä¶ vertical Twitter.

### **Start thinking mobile-first, just like the web.**

As&nbsp;[**GaryVee**](https://twitter.com/garyvee)&nbsp;predicted all these years ago (it‚Äôs actually called&nbsp;_pattern recognition_), TikTok got so popular that it forced all other platforms to come up with a similar, short vertical video format.

And with the majority of computers being pocket phones, this trend is not going anywhere.

You don‚Äôt&nbsp;_have_&nbsp;to make vertical videos if that‚Äôs not your jam‚Ä¶ but we‚Äôve seen what happened to websites ignoring the responsive design revolution.

> _**Well, users can pinch to zoom on my website!**_

Yeah,&nbsp;_right_.

It‚Äôs pretty obvious that most platforms will push and promote vertical content. Again, they‚Äôre competing with TikTok. People can still view your landscape videos and flip their phone sideways.

But the platforms you publish your videos on are likely to help put your content in front of more users if you adapt to the new vertical format.

And provide a better user experience for the consumer.

I tell you what - if I‚Äôm holding my phone in one hand and the dog leash (or a coffee) in the other,&nbsp;**I am not flipping my phone sideways to watch your video**.

Watching a tiny landscape video on a vertically held phone is fine to watch a basketball highlight.

But trying to watch coding videos with tiny font size is‚Ä¶ no fun.

---

## **Challenges of vertical coding videos**

Ok, so I was set on this challenge of recording footage to be used for both 16/9 traditional format and 9/16 portrait mode.

---

---

This causes a whole lotta headaches when it comes to coding tutorials.

If you‚Äôre just showing talking heads on an interview, it‚Äôs really easy to just crop the speakers differently to stack them horizontally or vertically.

Matter of fact, there are a bunch of SaaS apps that do this for you automatically.

---

[**Detail.co**](https://detail.co/)&nbsp;lets you record once, share everywhere.

---

But cropping talking heads is the least of my problems here.

We‚Äôre talking about showing code snippets. Turns out&nbsp;**you can‚Äôt really crop code snippets**.

Video format doesn‚Äôt have the luxury of HTML text beautifully wrapping when the window is resized.

Maybe one day - it would be really nice!

### **The ideal format for ‚Äúwork everywhere‚Äù code snippets**

Traditional 16/9 screencasts typically optimise to&nbsp;**give the code as much real estate**&nbsp;as possible.

If the output of the code (UI, console, ‚Ä¶) makes sense in a narrow side panel, it can be displayed side by side with the code.

---

---

Otherwise, it‚Äôs pretty common to see a screencast ‚Äúflip‚Äù between code and output, allowing both to alternatively use the full width of the video.

At least this is the format I‚Äôve myself been following for many years, thanks to&nbsp;[**egghead mentoring**](https://howtoegghead.com/).

It lets you set the coding font size much bigger, which is critical to&nbsp;**allow users to watch your content on tiny screens**.

Again, hints of&nbsp;**mobile-first thinking**&nbsp;here.

But there is a problem: that layout really doesn‚Äôt work well for vertical format videos.

If you‚Äôve ever tried to ‚Äúrepurpose‚Äù one of your old 16/9 screencast to a vertical format, you likely made a quick realisation:

Wide code snippets are terrible for narrow screens.

They leave yo with two options:

1. **Zoom out the code recordings to make them fit.**&nbsp;Your viewers will have a hard time reading these tiny lines of code!

---

1. **Crop out the code**, and somewhat fiddle with the ‚Äúfocal point‚Äù during the screencast, to show the most relevant part of the lines of code you‚Äôre talking about

---

Both solutions are less than ideal.

Option 2 is better for the viewer, but will make your editing life miserable.

### **Okay, so‚Ä¶ narrow code window, I get it!**

To produce vertical code screencasts, you‚Äôd ideally want your code window to be pretty narrow.

Imagine your typical laptop screen. You‚Äôd want the code window to use 1/3 of the display width, and the full height.

---

---

And you‚Äôd want to do the same for any eventual code output, like a UI or a terminal window.

---

---

Look at that, you even have one last third of screen real estate to capture a third source.

---

---

Amazing!

All you need to do is slice the right part of the recording in your video editing software.

You‚Äôve got&nbsp;**first party footage**&nbsp;for making vertical videos.

Look at you creating&nbsp;_**mobile-first**_&nbsp;videos! üòé

### **Wait. There is a new problem!**

While that ‚Äúsplit display in three columns‚Äù recording approach works really well for vertical format, we‚Äôve kinda made the ‚Äútraditional‚Äù landscape story less than ideal.

What do we do with all this horizontal real estate?

Zoom in the code and the output?

---

---

Actually, not a bad idea. It‚Äôs probably your best option.

That, or you have your ‚Äúsliced thirds‚Äù side by side, and fill the last third with your face, as the presenter.

---

Oh hey, I know that guy!

---

There are options, but you‚Äôll likely have this nagging feeling that&nbsp;**you‚Äôre treating landscape video as a third-party citizen**. An after thought.

What used to be your&nbsp;**staple of coding tutorials, your magic recipe for high quality screencasts**, is now relayed to an afterthought.

That's sad. You probably don‚Äôt want that.

Landscape videos are still very valuable. Desktops are not going anywhere.

### **We need something in the middle**

We‚Äôve established that:

- Wide coding windows are&nbsp;**too wide for vertical**&nbsp;videos.
- Narrow coding windows are&nbsp;**too narrow for landscape**&nbsp;videos.

But what about‚Ä¶&nbsp;**square**&nbsp;windows?

Heh.

And by square, I mean ‚Äúroughly‚Äù square. Let‚Äôs call it&nbsp;_square-ish_.

Think about it for a minute.

Both the&nbsp;`16/9`&nbsp;landscape and&nbsp;`9/16`&nbsp;portrait layouts can fit two&nbsp;_square-ish_&nbsp;shapes pretty nicely:

---

Square-ish windows!

---

The math confirms it.

A square has a ratio of&nbsp;`1/1`. Or‚Ä¶&nbsp;`8/8`.

Put two squares side by side, and you have‚Ä¶&nbsp;`16/8`. Or&nbsp;`8/16`&nbsp;if stacked vertically.

The math adds up

---

That‚Äôs&nbsp;_pretty close_&nbsp;to the most popular video aspect ratios!

And you know what‚Äôs another very popular video aspect ratio?

Yep. Square.

I bet that could work quite well with&nbsp;_square-ish_&nbsp;footage üôÇ

### **Nothing replaces multiple recordings‚Ä¶ but this gets us close!**

Recording in squares sounds like a pretty good ‚Äúoverall‚Äù strategy!

You‚Äôre still making compromises. Nothing will ever truly replace two separate, ‚Äúfirst class citizen‚Äù recordings for landscape and portrait.

But it definitely gets you in this ‚Äúgood enough‚Äù space to consider saving a lot of duplicated recording time.

---

## **Here‚Äôs a concrete example**

I proceeded to record my screen footage with square-ish windows for the code and the UI, something like this:

---

---

Once I was done, I dropped the recordings in my editing software, and went to work.

### **The traditional landscape video**

When working with squares, remember that you‚Äôre working with ‚Äúgood enough‚Äù footage, but you might want to&nbsp;**add a little bit of polish**&nbsp;by making some&nbsp;**custom window cropping**, or add an overlay mask.

For this one, I didn‚Äôt really care too much about improving the layout for the YouTube video.

To be honest, I was just excited to&nbsp;**validate my theory**&nbsp;that recording square footage would allow me to create a vertical video with the same recordings.

I still gave some love to the video with some fancy animated text overlays, but I kept the code + UI layout&nbsp;_as is_.

Here‚Äôs the video:

I think it‚Äôs pretty darn good!

You can see the&nbsp;`50/50`&nbsp;split layout in the middle.

Note that I also&nbsp;**boosted the font size a little**, compared to my typical screencast.

I want the font to be as big as possible on small screens, so I boosted it to a level where it still was pleasant to look at, and didn‚Äôt wrap too much.

### **The vertical format video**

For this one, I spent a bit more time. It was my first experiment with making vertical videos with square footage.

I had the theory in mind, I just needed to&nbsp;_validate_&nbsp;it.

I won‚Äôt go in details about the editing process here, but I will definitely write another post for this. I promise!

Regardless of what video editing software you‚Äôre using, the main ‚Äútrick‚Äù will be similar. You basically want to&nbsp;**duplicate the footage and stack the two clips**&nbsp;on top of each other.

With some arbitrary cropping and positioning, you want to pus the code and output on top of each other in the composition.

You may opt for a perfect vertical&nbsp;`50/50 split`, but there are no hard rules here.

That‚Äôs what I did initially, and it looked like this:

---

---

I then realised that at some point, the code was taking a little more vertical space than the half it was given.

And the UI did not need all the real estate.

I decided to nudge the split a little lower, to make things fit in better:

---

---

As I mentioned, there are no hard rules here. It depends on your content first and foremost!

For my face, I just cropped the camera footage to make myself fit in the full window:

---

---

I don‚Äôt really feel the need to be in a little circle for the whole video, so I opted to be either front-and-center, or not there at all.

With those decisions made, I proceeded to edit the whole video.

It was&nbsp;_okay._&nbsp;I almost shipped it, but‚Ä¶ I wasn‚Äôt perfectly happy.

It was missing a little of the ‚ÄúWOW‚Äù factor that those&nbsp;**highly engaging vertical videos**&nbsp;typically get.

I judged that it needed some colors and some text.

So I created a fancy ‚Äúoverlay mask‚Äù that creates little ‚Äúwindows‚Äù for the code and the UI:

---

---

I‚Äôll go into the specifics of this implementation in another post, but there are many ways to achieve this.

It‚Äôs typically a lot of work (for the first video anyway), and the video does not absolutely&nbsp;_need_&nbsp;that.

But in this case, I wanted to go the extra mile. And I think it paid off!

I also updated my animated text overlays from the landscape videos. The sizes and enter/leave positions where totally different, but the text and ‚Äútimings‚Äù remained the same.

---

---

With those additions, the video went from ‚Äúmeh, it‚Äôs okay‚Äù to&nbsp;**‚ÄúHOLY SHEESH this is amazing!!‚Äù**.

I‚Äôm really happy that I went the extra mile. It truly made the video much punchier.

And it made me proud and super happy!

You've already seen the video (it's in the tweet at the top of the article).

But I have also made a shorter version with the fun/playful part at the end for YouTube #shorts, which must be under 60 seconds in length.

It really slaps. üòÖ I love the super short aspect to it!

---

Okay, I think I am done here. Let me recap some of the things to keep in mind to recording the pipe dream ‚Äúuniversal, responsive footage‚Äù for coding screencasts.

## **Hot tips for recording ‚Äúresponsive‚Äù coding screencasts**

- Record your coding + output in&nbsp;**square-ish**&nbsp;windows
- Make the font size as big as reasonably possible
- Add ample padding in your code and UI. This will&nbsp;**make custom cropping much easier**
- I also recommend turning on ‚Äúword wrap‚Äù in your code editor, so everything remains within the screen!

## **Aaaand, that‚Äôs it for this one!**

As promised, I will write another post where I show you how I created the ‚Äúmasking overlay‚Äù for the vertical video.

Thanks for reading, and have a lovely rest of your day üëã

avatar for simonswiss
